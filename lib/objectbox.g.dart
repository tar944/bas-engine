// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/data/models/imageGroupModel.dart';
import 'src/data/models/imageModel.dart';
import 'src/data/models/labelModel.dart';
import 'src/data/models/objectModel.dart';
import 'src/data/models/projectModel.dart';
import 'src/data/models/projectPartModel.dart';
import 'src/data/models/videoModel.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(5, 8704043719060779501),
      name: 'VideoModel',
      lastPropertyId: const IdUid(10, 2359003824554373012),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9014292450817808013),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1784800348298360510),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2635845138829844197),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8023234655259261754),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6284512524528458776),
            name: 'thumbnailPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3624965250021154932),
            name: 'projectId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 1433992319591749680),
            relationTarget: 'ProjectModel'),
        ModelProperty(
            id: const IdUid(9, 7462131883373829284),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2359003824554373012),
            name: 'prjUUID',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(18, 3322661048309709116),
            name: 'allImages',
            targetId: const IdUid(14, 6822118099532867753))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 1544585194803526305),
      name: 'LabelModel',
      lastPropertyId: const IdUid(7, 2055208558253768712),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6550168810363052448),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4441362858613917926),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3522587596204039150),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 924852609206785212),
            name: 'levelName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2055208558253768712),
            name: 'action',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 1683867291927204697),
      name: 'ProjectModel',
      lastPropertyId: const IdUid(8, 8644191240917492695),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1545176686474911878),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7611446891522965255),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4853428207299313903),
            name: 'companyId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 299046445715947445),
            name: 'companyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3545187565369013897),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1101459311671021230),
            name: 'icon',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8567769690129622835),
            name: 'companyLogo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8644191240917492695),
            name: 'uuid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 5102910624347306211),
            name: 'allVideos',
            targetId: const IdUid(5, 8704043719060779501)),
        ModelRelation(
            id: const IdUid(12, 2602594879739795062),
            name: 'allParts',
            targetId: const IdUid(17, 8566624654259097881)),
        ModelRelation(
            id: const IdUid(27, 247004475918620838),
            name: 'allLabels',
            targetId: const IdUid(11, 1544585194803526305))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 6822118099532867753),
      name: 'ImageModel',
      lastPropertyId: const IdUid(15, 4525821334691087722),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4343096927916429473),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1110342312031206512),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2659828480832045149),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6409448032956664403),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4525821334691087722),
            name: 'objUUID',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 8892823931225835339),
      name: 'ObjectModel',
      lastPropertyId: const IdUid(31, 3993222101260499379),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1506594777761647718),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2377156492082898151),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 736959533429411967),
            name: 'left',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3827726491252733812),
            name: 'right',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3427931075656366851),
            name: 'top',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7908056168176402471),
            name: 'bottom',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2801985163568977170),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 8462043841317856120),
            name: 'imageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 2151317765269103283),
            relationTarget: 'ImageModel'),
        ModelProperty(
            id: const IdUid(18, 4125166657056704563),
            name: 'actionType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 224457368047924132),
            name: 'typedText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 5874399960681500288),
            name: 'actX',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 1546829186045300551),
            name: 'actY',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 701907757606801129),
            name: 'labelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 1012226703174902082),
            relationTarget: 'LabelModel'),
        ModelProperty(
            id: const IdUid(24, 6982572751530212081),
            name: 'isNavTool',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 447693223963496384),
            name: 'srcObjectId',
            type: 11,
            flags: 520,
            indexId: const IdUid(23, 5855966450476248403),
            relationTarget: 'ObjectModel'),
        ModelProperty(
            id: const IdUid(27, 397024808833094930),
            name: 'isMainObject',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 610347001844851126),
            name: 'needToCompare',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 5118056379320144992),
            name: 'navDuty',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 6891732610780172479),
      name: 'ImageGroupModel',
      lastPropertyId: const IdUid(11, 7543727303735509034),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6952424420782981185),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8680105864330592597),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8746083884417398901),
            name: 'partUUID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6555445132878002646),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3724108777633695992),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 623411051368177646),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1229418524994533953),
            name: 'labelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 9059001634404699452),
            relationTarget: 'LabelModel'),
        ModelProperty(
            id: const IdUid(9, 2969703194434633448),
            name: 'groupUUID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2927507162817163242),
            name: 'mainStateId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 8897593451848072544),
            relationTarget: 'ObjectModel'),
        ModelProperty(
            id: const IdUid(11, 7543727303735509034),
            name: 'state',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(25, 7488586066767824454),
            name: 'allGroups',
            targetId: const IdUid(16, 6891732610780172479)),
        ModelRelation(
            id: const IdUid(26, 5332826950601969275),
            name: 'subObjects',
            targetId: const IdUid(15, 8892823931225835339)),
        ModelRelation(
            id: const IdUid(31, 2492633852371909747),
            name: 'allStates',
            targetId: const IdUid(15, 8892823931225835339)),
        ModelRelation(
            id: const IdUid(32, 8973519066316929164),
            name: 'navObjects',
            targetId: const IdUid(15, 8892823931225835339))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 8566624654259097881),
      name: 'ProjectPartModel',
      lastPropertyId: const IdUid(6, 5092175303764554711),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 560598162288186156),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5953754168239065607),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4368412060964700486),
            name: 'prjUUID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2721610868755699583),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 619479023925746358),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5092175303764554711),
            name: 'path',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(21, 4272648572958339007),
            name: 'allGroups',
            targetId: const IdUid(16, 6891732610780172479)),
        ModelRelation(
            id: const IdUid(23, 1114726968127943046),
            name: 'allObjects',
            targetId: const IdUid(15, 8892823931225835339))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(17, 8566624654259097881),
      lastIndexId: const IdUid(23, 5855966450476248403),
      lastRelationId: const IdUid(32, 8973519066316929164),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        5922885288332288138,
        1511157904358265259,
        3071344233334664377,
        9017281774192133442,
        4904567446919175383,
        1597679080181769401,
        2700096272836654076,
        7519792149997907067,
        4284228112816463884,
        3789145789417721602
      ],
      retiredIndexUids: const [
        2805705393685960525,
        6611679611590200189,
        9109145890961680612,
        9102685703102770362,
        8485429454284523408,
        4390184275348585787,
        2867568999367445977,
        5503554711709891192,
        4723096151288393785
      ],
      retiredPropertyUids: const [
        4568898860801454124,
        849727135604059823,
        6542381401667717635,
        3519223867602794168,
        2861927139316778099,
        2499940764790309662,
        8539448575626686583,
        1756235525460106639,
        4027477781195997805,
        3528762213549066877,
        7879993695700189823,
        2790378843541322856,
        7818238208987796591,
        533588271424915937,
        918939126606934192,
        4788626507602896507,
        194160298915799660,
        2118667474981069231,
        3661027274911993305,
        1962129822223855595,
        5161238095427950572,
        851009505196112053,
        4985530005039131169,
        8120794572590322291,
        4114126750303806628,
        7355176820899515523,
        5844064191119127598,
        7324499478361269917,
        2380622141480846707,
        6629873035293510143,
        2205741989534374320,
        2021594605780541537,
        5827270774663624382,
        9200597527566909841,
        4786145739648791479,
        2459049436572717933,
        913838930232164171,
        762380834622339688,
        2344305387419992394,
        5456851054820624921,
        6265991732107459666,
        7927146172863663854,
        1576951636825092240,
        4018237723287730103,
        6713964104879476433,
        3023257593502409746,
        4647387367503344126,
        1464569696793758529,
        6936433750103159329,
        7728659078620245349,
        5649643688079043407,
        3906633095853360931,
        4910894607694431322,
        8563603067741121587,
        292102565215588503,
        1319629608762230992,
        754001611922789193,
        3434340765512382439,
        3220529532867476599,
        3350676040812579837,
        5446305834062302201,
        7786409238732528863,
        4551961211393105819,
        6661492699740524959,
        5917866481269124257,
        2837853266455970129,
        239330927059933361,
        4387130054909200501,
        2321597769615988385,
        2819315822133627876,
        7913137784969084287,
        699902798551286387,
        5562409889496848900,
        7594578219878453668,
        7834160924787204874,
        5354752581547886527,
        605712471619754918,
        1930246537800128631,
        1490248681159816392,
        6398271985395206580,
        2078705865812849615,
        8111318749703218091,
        8652814554617726621,
        7382600257722930033,
        1381923561209100769,
        1458922637572425683,
        245144734813337382,
        1675292515585985723,
        3400226446235154169,
        347068920317882612,
        1116117600021631583,
        3191247272022823658,
        5529225673158285042,
        3502950512580136669,
        696569451319453339,
        6075807646714879813,
        152295699631796722,
        8099068089268500598,
        6003403712866395651,
        7262380370528992520,
        394456113335641601,
        7011220582421193652,
        136518245739837269,
        692399060375982363,
        7373862439342309942,
        3560814101261526568,
        1139507671129632459,
        670399744735781267,
        415305574053196858,
        8423238862895551549,
        3590964460677945592,
        3167952900102272170,
        8379708619443825569,
        1726313306693595856,
        8122576037519270543,
        6509670852060955200,
        74590857641547405,
        600920114426525750,
        2813440565600476362,
        4291958494173271157,
        2043034771619398137,
        1285654446534784458,
        9165561462202068346,
        5080785029030309426,
        4745844637427822667,
        4178048732557493644,
        6934286019042658826,
        5847613169931022485,
        5666200048488082066,
        3993222101260499379
      ],
      retiredRelationUids: const [
        7096364116743183016,
        3903017910301198765,
        6703082210904606093,
        4455275860056698692,
        6490752590319845341,
        3601124264196646975,
        5357330969673175979,
        3750078866380978121,
        4432505387344085307,
        6568521647494320726,
        1774651405903369676,
        6554159896701818121,
        792537263070642319,
        650003946365731690
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    VideoModel: EntityDefinition<VideoModel>(
        model: _entities[0],
        toOneRelations: (VideoModel object) => [object.project],
        toManyRelations: (VideoModel object) =>
            {RelInfo<VideoModel>.toMany(18, object.id): object.allImages},
        getId: (VideoModel object) => object.id,
        setId: (VideoModel object, int id) {
          object.id = id;
        },
        objectToFB: (VideoModel object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final pathOffset = fbb.writeString(object.path);
          final timeOffset =
              object.time == null ? null : fbb.writeString(object.time!);
          final thumbnailPathOffset = fbb.writeString(object.thumbnailPath);
          final uuidOffset = fbb.writeString(object.uuid);
          final prjUUIDOffset = fbb.writeString(object.prjUUID);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, pathOffset);
          fbb.addOffset(3, timeOffset);
          fbb.addOffset(5, thumbnailPathOffset);
          fbb.addInt64(7, object.project.targetId);
          fbb.addOffset(8, uuidOffset);
          fbb.addOffset(9, prjUUIDOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final prjUUIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final thumbnailPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final timeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = VideoModel(idParam, prjUUIDParam, nameParam,
              thumbnailPathParam, pathParam, timeParam)
            ..uuid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '');
          object.project.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.project.attach(store);
          InternalToManyAccess.setRelInfo<VideoModel>(object.allImages, store,
              RelInfo<VideoModel>.toMany(18, object.id));
          return object;
        }),
    LabelModel: EntityDefinition<LabelModel>(
        model: _entities[1],
        toOneRelations: (LabelModel object) => [],
        toManyRelations: (LabelModel object) => {},
        getId: (LabelModel object) => object.id,
        setId: (LabelModel object, int id) {
          object.id = id;
        },
        objectToFB: (LabelModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uuidOffset = fbb.writeString(object.uuid);
          final levelNameOffset = fbb.writeString(object.levelName);
          final actionOffset = fbb.writeString(object.action);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(3, uuidOffset);
          fbb.addOffset(4, levelNameOffset);
          fbb.addOffset(6, actionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final levelNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final actionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object =
              LabelModel(idParam, nameParam, levelNameParam, actionParam)
                ..uuid = const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 10, '');

          return object;
        }),
    ProjectModel: EntityDefinition<ProjectModel>(
        model: _entities[2],
        toOneRelations: (ProjectModel object) => [],
        toManyRelations: (ProjectModel object) => {
              RelInfo<ProjectModel>.toMany(11, object.id): object.allVideos,
              RelInfo<ProjectModel>.toMany(12, object.id): object.allParts,
              RelInfo<ProjectModel>.toMany(27, object.id): object.allLabels
            },
        getId: (ProjectModel object) => object.id,
        setId: (ProjectModel object, int id) {
          object.id = id;
        },
        objectToFB: (ProjectModel object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final companyIdOffset = object.companyId == null
              ? null
              : fbb.writeString(object.companyId!);
          final companyNameOffset = object.companyName == null
              ? null
              : fbb.writeString(object.companyName!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final iconOffset =
              object.icon == null ? null : fbb.writeString(object.icon!);
          final companyLogoOffset = object.companyLogo == null
              ? null
              : fbb.writeString(object.companyLogo!);
          final uuidOffset = fbb.writeString(object.uuid);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, companyIdOffset);
          fbb.addOffset(3, companyNameOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, iconOffset);
          fbb.addOffset(6, companyLogoOffset);
          fbb.addOffset(7, uuidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final companyIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final companyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final iconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final companyLogoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final object = ProjectModel(
              idParam,
              uuidParam,
              titleParam,
              companyIdParam,
              companyNameParam,
              descriptionParam,
              iconParam,
              companyLogoParam);
          InternalToManyAccess.setRelInfo<ProjectModel>(object.allVideos, store,
              RelInfo<ProjectModel>.toMany(11, object.id));
          InternalToManyAccess.setRelInfo<ProjectModel>(object.allParts, store,
              RelInfo<ProjectModel>.toMany(12, object.id));
          InternalToManyAccess.setRelInfo<ProjectModel>(object.allLabels, store,
              RelInfo<ProjectModel>.toMany(27, object.id));
          return object;
        }),
    ImageModel: EntityDefinition<ImageModel>(
        model: _entities[3],
        toOneRelations: (ImageModel object) => [],
        toManyRelations: (ImageModel object) => {},
        getId: (ImageModel object) => object.id,
        setId: (ImageModel object, int id) {
          object.id = id;
        },
        objectToFB: (ImageModel object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          final objUUIDOffset = fbb.writeString(object.objUUID);
          fbb.startTable(16);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, pathOffset);
          fbb.addOffset(14, objUUIDOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final objUUIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ImageModel(
              idParam, uuidParam, objUUIDParam, nameParam, pathParam);

          return object;
        }),
    ObjectModel: EntityDefinition<ObjectModel>(
        model: _entities[4],
        toOneRelations: (ObjectModel object) =>
            [object.image, object.label, object.srcObject],
        toManyRelations: (ObjectModel object) => {},
        getId: (ObjectModel object) => object.id,
        setId: (ObjectModel object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectModel object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final colorOffset = fbb.writeString(object.color);
          final actionTypeOffset = fbb.writeString(object.actionType);
          final typedTextOffset = fbb.writeString(object.typedText);
          final navDutyOffset = fbb.writeString(object.navDuty);
          fbb.startTable(32);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, uuidOffset);
          fbb.addFloat64(2, object.left);
          fbb.addFloat64(3, object.right);
          fbb.addFloat64(4, object.top);
          fbb.addFloat64(5, object.bottom);
          fbb.addOffset(7, colorOffset);
          fbb.addInt64(16, object.image.targetId);
          fbb.addOffset(17, actionTypeOffset);
          fbb.addOffset(18, typedTextOffset);
          fbb.addInt64(19, object.actX);
          fbb.addInt64(20, object.actY);
          fbb.addInt64(22, object.label.targetId);
          fbb.addBool(23, object.isNavTool);
          fbb.addInt64(25, object.srcObject.targetId);
          fbb.addBool(26, object.isMainObject);
          fbb.addBool(27, object.needToCompare);
          fbb.addOffset(28, navDutyOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final leftParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final rightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final topParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final bottomParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = ObjectModel(
              idParam, uuidParam, leftParam, rightParam, topParam, bottomParam)
            ..color = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..actionType = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 38, '')
            ..typedText = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 40, '')
            ..actX = const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0)
            ..actY = const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0)
            ..isNavTool =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 50, false)
            ..isMainObject =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 56, false)
            ..needToCompare =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 58, false)
            ..navDuty = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 60, '');
          object.image.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.image.attach(store);
          object.label.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          object.label.attach(store);
          object.srcObject.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0);
          object.srcObject.attach(store);
          return object;
        }),
    ImageGroupModel: EntityDefinition<ImageGroupModel>(
        model: _entities[5],
        toOneRelations: (ImageGroupModel object) =>
            [object.label, object.mainState],
        toManyRelations: (ImageGroupModel object) => {
              RelInfo<ImageGroupModel>.toMany(25, object.id): object.allGroups,
              RelInfo<ImageGroupModel>.toMany(26, object.id): object.subObjects,
              RelInfo<ImageGroupModel>.toMany(31, object.id): object.allStates,
              RelInfo<ImageGroupModel>.toMany(32, object.id): object.navObjects
            },
        getId: (ImageGroupModel object) => object.id,
        setId: (ImageGroupModel object, int id) {
          object.id = id;
        },
        objectToFB: (ImageGroupModel object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final partUUIDOffset = fbb.writeString(object.partUUID);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final typeOffset = fbb.writeString(object.type);
          final pathOffset = fbb.writeString(object.path);
          final groupUUIDOffset = fbb.writeString(object.groupUUID);
          final stateOffset = fbb.writeString(object.state);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, partUUIDOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, pathOffset);
          fbb.addInt64(7, object.label.targetId);
          fbb.addOffset(8, groupUUIDOffset);
          fbb.addInt64(9, object.mainState.targetId);
          fbb.addOffset(10, stateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final partUUIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final groupUUIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = ImageGroupModel(
              idParam, partUUIDParam, groupUUIDParam, nameParam, pathParam)
            ..uuid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..state = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '');
          object.label.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.label.attach(store);
          object.mainState.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.mainState.attach(store);
          InternalToManyAccess.setRelInfo<ImageGroupModel>(object.allGroups,
              store, RelInfo<ImageGroupModel>.toMany(25, object.id));
          InternalToManyAccess.setRelInfo<ImageGroupModel>(object.subObjects,
              store, RelInfo<ImageGroupModel>.toMany(26, object.id));
          InternalToManyAccess.setRelInfo<ImageGroupModel>(object.allStates,
              store, RelInfo<ImageGroupModel>.toMany(31, object.id));
          InternalToManyAccess.setRelInfo<ImageGroupModel>(object.navObjects,
              store, RelInfo<ImageGroupModel>.toMany(32, object.id));
          return object;
        }),
    ProjectPartModel: EntityDefinition<ProjectPartModel>(
        model: _entities[6],
        toOneRelations: (ProjectPartModel object) => [],
        toManyRelations: (ProjectPartModel object) => {
              RelInfo<ProjectPartModel>.toMany(21, object.id): object.allGroups,
              RelInfo<ProjectPartModel>.toMany(23, object.id): object.allObjects
            },
        getId: (ProjectPartModel object) => object.id,
        setId: (ProjectPartModel object, int id) {
          object.id = id;
        },
        objectToFB: (ProjectPartModel object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final prjUUIDOffset = fbb.writeString(object.prjUUID);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, prjUUIDOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, pathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final prjUUIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final object = ProjectPartModel(idParam, prjUUIDParam, uuidParam,
              nameParam, pathParam, descriptionParam);
          InternalToManyAccess.setRelInfo<ProjectPartModel>(object.allGroups,
              store, RelInfo<ProjectPartModel>.toMany(21, object.id));
          InternalToManyAccess.setRelInfo<ProjectPartModel>(object.allObjects,
              store, RelInfo<ProjectPartModel>.toMany(23, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [VideoModel] entity fields to define ObjectBox queries.
class VideoModel_ {
  /// see [VideoModel.id]
  static final id =
      QueryIntegerProperty<VideoModel>(_entities[0].properties[0]);

  /// see [VideoModel.name]
  static final name =
      QueryStringProperty<VideoModel>(_entities[0].properties[1]);

  /// see [VideoModel.path]
  static final path =
      QueryStringProperty<VideoModel>(_entities[0].properties[2]);

  /// see [VideoModel.time]
  static final time =
      QueryStringProperty<VideoModel>(_entities[0].properties[3]);

  /// see [VideoModel.thumbnailPath]
  static final thumbnailPath =
      QueryStringProperty<VideoModel>(_entities[0].properties[4]);

  /// see [VideoModel.project]
  static final project =
      QueryRelationToOne<VideoModel, ProjectModel>(_entities[0].properties[5]);

  /// see [VideoModel.uuid]
  static final uuid =
      QueryStringProperty<VideoModel>(_entities[0].properties[6]);

  /// see [VideoModel.prjUUID]
  static final prjUUID =
      QueryStringProperty<VideoModel>(_entities[0].properties[7]);

  /// see [VideoModel.allImages]
  static final allImages =
      QueryRelationToMany<VideoModel, ImageModel>(_entities[0].relations[0]);
}

/// [LabelModel] entity fields to define ObjectBox queries.
class LabelModel_ {
  /// see [LabelModel.id]
  static final id =
      QueryIntegerProperty<LabelModel>(_entities[1].properties[0]);

  /// see [LabelModel.name]
  static final name =
      QueryStringProperty<LabelModel>(_entities[1].properties[1]);

  /// see [LabelModel.uuid]
  static final uuid =
      QueryStringProperty<LabelModel>(_entities[1].properties[2]);

  /// see [LabelModel.levelName]
  static final levelName =
      QueryStringProperty<LabelModel>(_entities[1].properties[3]);

  /// see [LabelModel.action]
  static final action =
      QueryStringProperty<LabelModel>(_entities[1].properties[4]);
}

/// [ProjectModel] entity fields to define ObjectBox queries.
class ProjectModel_ {
  /// see [ProjectModel.id]
  static final id =
      QueryIntegerProperty<ProjectModel>(_entities[2].properties[0]);

  /// see [ProjectModel.title]
  static final title =
      QueryStringProperty<ProjectModel>(_entities[2].properties[1]);

  /// see [ProjectModel.companyId]
  static final companyId =
      QueryStringProperty<ProjectModel>(_entities[2].properties[2]);

  /// see [ProjectModel.companyName]
  static final companyName =
      QueryStringProperty<ProjectModel>(_entities[2].properties[3]);

  /// see [ProjectModel.description]
  static final description =
      QueryStringProperty<ProjectModel>(_entities[2].properties[4]);

  /// see [ProjectModel.icon]
  static final icon =
      QueryStringProperty<ProjectModel>(_entities[2].properties[5]);

  /// see [ProjectModel.companyLogo]
  static final companyLogo =
      QueryStringProperty<ProjectModel>(_entities[2].properties[6]);

  /// see [ProjectModel.uuid]
  static final uuid =
      QueryStringProperty<ProjectModel>(_entities[2].properties[7]);

  /// see [ProjectModel.allVideos]
  static final allVideos =
      QueryRelationToMany<ProjectModel, VideoModel>(_entities[2].relations[0]);

  /// see [ProjectModel.allParts]
  static final allParts = QueryRelationToMany<ProjectModel, ProjectPartModel>(
      _entities[2].relations[1]);

  /// see [ProjectModel.allLabels]
  static final allLabels =
      QueryRelationToMany<ProjectModel, LabelModel>(_entities[2].relations[2]);
}

/// [ImageModel] entity fields to define ObjectBox queries.
class ImageModel_ {
  /// see [ImageModel.id]
  static final id =
      QueryIntegerProperty<ImageModel>(_entities[3].properties[0]);

  /// see [ImageModel.uuid]
  static final uuid =
      QueryStringProperty<ImageModel>(_entities[3].properties[1]);

  /// see [ImageModel.name]
  static final name =
      QueryStringProperty<ImageModel>(_entities[3].properties[2]);

  /// see [ImageModel.path]
  static final path =
      QueryStringProperty<ImageModel>(_entities[3].properties[3]);

  /// see [ImageModel.objUUID]
  static final objUUID =
      QueryStringProperty<ImageModel>(_entities[3].properties[4]);
}

/// [ObjectModel] entity fields to define ObjectBox queries.
class ObjectModel_ {
  /// see [ObjectModel.id]
  static final id =
      QueryIntegerProperty<ObjectModel>(_entities[4].properties[0]);

  /// see [ObjectModel.uuid]
  static final uuid =
      QueryStringProperty<ObjectModel>(_entities[4].properties[1]);

  /// see [ObjectModel.left]
  static final left =
      QueryDoubleProperty<ObjectModel>(_entities[4].properties[2]);

  /// see [ObjectModel.right]
  static final right =
      QueryDoubleProperty<ObjectModel>(_entities[4].properties[3]);

  /// see [ObjectModel.top]
  static final top =
      QueryDoubleProperty<ObjectModel>(_entities[4].properties[4]);

  /// see [ObjectModel.bottom]
  static final bottom =
      QueryDoubleProperty<ObjectModel>(_entities[4].properties[5]);

  /// see [ObjectModel.color]
  static final color =
      QueryStringProperty<ObjectModel>(_entities[4].properties[6]);

  /// see [ObjectModel.image]
  static final image =
      QueryRelationToOne<ObjectModel, ImageModel>(_entities[4].properties[7]);

  /// see [ObjectModel.actionType]
  static final actionType =
      QueryStringProperty<ObjectModel>(_entities[4].properties[8]);

  /// see [ObjectModel.typedText]
  static final typedText =
      QueryStringProperty<ObjectModel>(_entities[4].properties[9]);

  /// see [ObjectModel.actX]
  static final actX =
      QueryIntegerProperty<ObjectModel>(_entities[4].properties[10]);

  /// see [ObjectModel.actY]
  static final actY =
      QueryIntegerProperty<ObjectModel>(_entities[4].properties[11]);

  /// see [ObjectModel.label]
  static final label =
      QueryRelationToOne<ObjectModel, LabelModel>(_entities[4].properties[12]);

  /// see [ObjectModel.isNavTool]
  static final isNavTool =
      QueryBooleanProperty<ObjectModel>(_entities[4].properties[13]);

  /// see [ObjectModel.srcObject]
  static final srcObject =
      QueryRelationToOne<ObjectModel, ObjectModel>(_entities[4].properties[14]);

  /// see [ObjectModel.isMainObject]
  static final isMainObject =
      QueryBooleanProperty<ObjectModel>(_entities[4].properties[15]);

  /// see [ObjectModel.needToCompare]
  static final needToCompare =
      QueryBooleanProperty<ObjectModel>(_entities[4].properties[16]);

  /// see [ObjectModel.navDuty]
  static final navDuty =
      QueryStringProperty<ObjectModel>(_entities[4].properties[17]);
}

/// [ImageGroupModel] entity fields to define ObjectBox queries.
class ImageGroupModel_ {
  /// see [ImageGroupModel.id]
  static final id =
      QueryIntegerProperty<ImageGroupModel>(_entities[5].properties[0]);

  /// see [ImageGroupModel.uuid]
  static final uuid =
      QueryStringProperty<ImageGroupModel>(_entities[5].properties[1]);

  /// see [ImageGroupModel.partUUID]
  static final partUUID =
      QueryStringProperty<ImageGroupModel>(_entities[5].properties[2]);

  /// see [ImageGroupModel.name]
  static final name =
      QueryStringProperty<ImageGroupModel>(_entities[5].properties[3]);

  /// see [ImageGroupModel.type]
  static final type =
      QueryStringProperty<ImageGroupModel>(_entities[5].properties[4]);

  /// see [ImageGroupModel.path]
  static final path =
      QueryStringProperty<ImageGroupModel>(_entities[5].properties[5]);

  /// see [ImageGroupModel.label]
  static final label = QueryRelationToOne<ImageGroupModel, LabelModel>(
      _entities[5].properties[6]);

  /// see [ImageGroupModel.groupUUID]
  static final groupUUID =
      QueryStringProperty<ImageGroupModel>(_entities[5].properties[7]);

  /// see [ImageGroupModel.mainState]
  static final mainState = QueryRelationToOne<ImageGroupModel, ObjectModel>(
      _entities[5].properties[8]);

  /// see [ImageGroupModel.state]
  static final state =
      QueryStringProperty<ImageGroupModel>(_entities[5].properties[9]);

  /// see [ImageGroupModel.allGroups]
  static final allGroups =
      QueryRelationToMany<ImageGroupModel, ImageGroupModel>(
          _entities[5].relations[0]);

  /// see [ImageGroupModel.subObjects]
  static final subObjects = QueryRelationToMany<ImageGroupModel, ObjectModel>(
      _entities[5].relations[1]);

  /// see [ImageGroupModel.allStates]
  static final allStates = QueryRelationToMany<ImageGroupModel, ObjectModel>(
      _entities[5].relations[2]);

  /// see [ImageGroupModel.navObjects]
  static final navObjects = QueryRelationToMany<ImageGroupModel, ObjectModel>(
      _entities[5].relations[3]);
}

/// [ProjectPartModel] entity fields to define ObjectBox queries.
class ProjectPartModel_ {
  /// see [ProjectPartModel.id]
  static final id =
      QueryIntegerProperty<ProjectPartModel>(_entities[6].properties[0]);

  /// see [ProjectPartModel.uuid]
  static final uuid =
      QueryStringProperty<ProjectPartModel>(_entities[6].properties[1]);

  /// see [ProjectPartModel.prjUUID]
  static final prjUUID =
      QueryStringProperty<ProjectPartModel>(_entities[6].properties[2]);

  /// see [ProjectPartModel.name]
  static final name =
      QueryStringProperty<ProjectPartModel>(_entities[6].properties[3]);

  /// see [ProjectPartModel.description]
  static final description =
      QueryStringProperty<ProjectPartModel>(_entities[6].properties[4]);

  /// see [ProjectPartModel.path]
  static final path =
      QueryStringProperty<ProjectPartModel>(_entities[6].properties[5]);

  /// see [ProjectPartModel.allGroups]
  static final allGroups =
      QueryRelationToMany<ProjectPartModel, ImageGroupModel>(
          _entities[6].relations[0]);

  /// see [ProjectPartModel.allObjects]
  static final allObjects = QueryRelationToMany<ProjectPartModel, ObjectModel>(
      _entities[6].relations[1]);
}
